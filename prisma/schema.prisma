// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           Int               @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String            @unique
  password     String
  role         Role              @default(USER)
  spreadsheets UserSpreadsheet[]
  created_at   DateTime          @default(now())
}

model Spreadsheet {
  id           Int               @id @default(autoincrement())
  start_date   DateTime
  end_date     DateTime
  spreadsheets UserSpreadsheet[] // Many-to-many
  categories   Category[] // One-to-many
  created_at   DateTime          @default(now())
}

model UserSpreadsheet {
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  spreadsheetId Int
  spreadsheet   Spreadsheet @relation(fields: [spreadsheetId], references: [id])

  @@id([userId, spreadsheetId])
}

model Category {
  id            Int           @id @default(autoincrement())
  spreadsheetId Int
  spreadsheet   Spreadsheet   @relation(fields: [spreadsheetId], references: [id])
  title         String
  description   String?
  current_date  DateTime
  subcategories SubCategory[] // One-to-many
  created_at    DateTime      @default(now())
}

model SubCategory {
  id              Int              @id @default(autoincrement())
  categoryId      Int
  category        Category         @relation(fields: [categoryId], references: [id])
  title           String
  description     String?
  monthlyFinances MonthlyFinance[] // One-to-many
  created_at      DateTime         @default(now())
}

model MonthlyFinance {
  id            Int           @id @default(autoincrement())
  subCategoryId Int
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  month         String
  total_price   Int
  transactions  Transaction[] // One-to-many
  created_at    DateTime      @default(now())
}

model Transaction {
  id               Int            @id @default(autoincrement())
  monthlyFinanceId Int
  monthlyFinance   MonthlyFinance @relation(fields: [monthlyFinanceId], references: [id])
  item_name        String?
  price            Float
  transaction_date DateTime
}
